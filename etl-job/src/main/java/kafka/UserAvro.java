/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3452132218576504771L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserAvro\",\"namespace\":\"kafka\",\"fields\":[{\"name\":\"user_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"is_new\",\"type\":\"boolean\"},{\"name\":\"content\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserAvro> ENCODER =
      new BinaryMessageEncoder<UserAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserAvro> DECODER =
      new BinaryMessageDecoder<UserAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<UserAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<UserAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this UserAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a UserAvro from a ByteBuffer. */
  public static UserAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String user_name;
  @Deprecated public boolean is_new;
  @Deprecated public String content;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserAvro() {}

  /**
   * All-args constructor.
   * @param user_name The new value for user_name
   * @param is_new The new value for is_new
   * @param content The new value for content
   */
  public UserAvro(String user_name, Boolean is_new, String content) {
    this.user_name = user_name;
    this.is_new = is_new;
    this.content = content;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return user_name;
    case 1: return is_new;
    case 2: return content;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: user_name = (String)value$; break;
    case 1: is_new = (Boolean)value$; break;
    case 2: content = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_name' field.
   * @return The value of the 'user_name' field.
   */
  public String getUserName() {
    return user_name;
  }

  /**
   * Sets the value of the 'user_name' field.
   * @param value the value to set.
   */
  public void setUserName(String value) {
    this.user_name = value;
  }

  /**
   * Gets the value of the 'is_new' field.
   * @return The value of the 'is_new' field.
   */
  public Boolean getIsNew() {
    return is_new;
  }

  /**
   * Sets the value of the 'is_new' field.
   * @param value the value to set.
   */
  public void setIsNew(Boolean value) {
    this.is_new = value;
  }

  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public String getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(String value) {
    this.content = value;
  }

  /**
   * Creates a new UserAvro RecordBuilder.
   * @return A new UserAvro RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new UserAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserAvro RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new UserAvro RecordBuilder by copying an existing UserAvro instance.
   * @param other The existing instance to copy.
   * @return A new UserAvro RecordBuilder
   */
  public static Builder newBuilder(UserAvro other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for UserAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserAvro>
    implements org.apache.avro.data.RecordBuilder<UserAvro> {

    private String user_name;
    private boolean is_new;
    private String content;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_name)) {
        this.user_name = data().deepCopy(fields()[0].schema(), other.user_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.is_new)) {
        this.is_new = data().deepCopy(fields()[1].schema(), other.is_new);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.content)) {
        this.content = data().deepCopy(fields()[2].schema(), other.content);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(UserAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_name)) {
        this.user_name = data().deepCopy(fields()[0].schema(), other.user_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.is_new)) {
        this.is_new = data().deepCopy(fields()[1].schema(), other.is_new);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.content)) {
        this.content = data().deepCopy(fields()[2].schema(), other.content);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'user_name' field.
      * @return The value.
      */
    public String getUserName() {
      return user_name;
    }

    /**
      * Sets the value of the 'user_name' field.
      * @param value The value of 'user_name'.
      * @return This builder.
      */
    public Builder setUserName(String value) {
      validate(fields()[0], value);
      this.user_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_name' field has been set.
      * @return True if the 'user_name' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_name' field.
      * @return This builder.
      */
    public Builder clearUserName() {
      user_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_new' field.
      * @return The value.
      */
    public Boolean getIsNew() {
      return is_new;
    }

    /**
      * Sets the value of the 'is_new' field.
      * @param value The value of 'is_new'.
      * @return This builder.
      */
    public Builder setIsNew(boolean value) {
      validate(fields()[1], value);
      this.is_new = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'is_new' field has been set.
      * @return True if the 'is_new' field has been set, false otherwise.
      */
    public boolean hasIsNew() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'is_new' field.
      * @return This builder.
      */
    public Builder clearIsNew() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public String getContent() {
      return content;
    }

    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public Builder setContent(String value) {
      validate(fields()[2], value);
      this.content = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public Builder clearContent() {
      content = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserAvro build() {
      try {
        UserAvro record = new UserAvro();
        record.user_name = fieldSetFlags()[0] ? this.user_name : (String) defaultValue(fields()[0]);
        record.is_new = fieldSetFlags()[1] ? this.is_new : (Boolean) defaultValue(fields()[1]);
        record.content = fieldSetFlags()[2] ? this.content : (String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserAvro>
    READER$ = (org.apache.avro.io.DatumReader<UserAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
